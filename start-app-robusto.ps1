param()
. "$(Join-Path $PSScriptRoot 'scripts/ps-utils.ps1')"

Write-Host "üöÄ Iniciando aplicaci√≥n UB Formaci√≥n..." -ForegroundColor Green

# 1. Detener procesos existentes
Write-Host "üõë Deteniendo procesos dotnet existentes..." -ForegroundColor Yellow
Stop-ByName -Name 'dotnet'
Start-Sleep -Seconds 2

# 2. Limpiar archivos DLL bloqueados (lecci√≥n aprendida)
Write-Host "üßπ Limpiando archivos DLL bloqueados..." -ForegroundColor Yellow
$backendDll = Join-Path $PSScriptRoot 'UB.Actividad1.API\bin\Debug\net8.0\UB.Actividad1.API.dll'
$frontendDll = Join-Path $PSScriptRoot 'WebServer\bin\Debug\net8.0\WebServer.dll'

if (Test-Path $backendDll) { 
    try { Remove-Item $backendDll -Force -ErrorAction SilentlyContinue }
    catch { Write-Warning "No se pudo eliminar $backendDll - puede estar bloqueado" }
}
if (Test-Path $frontendDll) { 
    try { Remove-Item $frontendDll -Force -ErrorAction SilentlyContinue }
    catch { Write-Warning "No se pudo eliminar $frontendDll - puede estar bloqueado" }
}

# 3. Compilar backend (lecci√≥n aprendida)
Write-Host "üî® Compilando backend..." -ForegroundColor Yellow
$backendDir = Join-Path $PSScriptRoot 'UB.Actividad1.API'
Push-Location $backendDir
try {
    $buildResult = & dotnet build --verbosity quiet 2>&1
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Error compilando backend: $buildResult"
        exit 1
    }
    Write-Host "‚úÖ Backend compilado correctamente" -ForegroundColor Green
} finally {
    Pop-Location
}

# 4. Compilar frontend
Write-Host "üî® Compilando frontend..." -ForegroundColor Yellow
$frontendDir = Join-Path $PSScriptRoot 'WebServer'
Push-Location $frontendDir
try {
    $buildResult = & dotnet build --verbosity quiet 2>&1
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Error compilando frontend: $buildResult"
        exit 1
    }
    Write-Host "‚úÖ Frontend compilado correctamente" -ForegroundColor Green
} finally {
    Pop-Location
}

# 5. Iniciar servicios en background
Write-Host "üöÄ Iniciando servicios..." -ForegroundColor Yellow
$logs = Join-Path $PSScriptRoot 'logs'
$backend = Start-BackgroundCommand -FilePath 'dotnet' -Arguments @('run','--urls','http://localhost:5001') -WorkingDirectory $backendDir -LogDirectory $logs -StartupTimeoutSec 30 -EnvVars @{ ASPNETCORE_ENVIRONMENT = 'Development' }
$frontend = Start-BackgroundCommand -FilePath 'dotnet' -Arguments @('run','--urls','http://localhost:8080') -WorkingDirectory $frontendDir -LogDirectory $logs -StartupTimeoutSec 30

# 6. Verificar servicios
Write-Host "üîç Verificando servicios..." -ForegroundColor Yellow
if (-not (Wait-HttpReady -Url 'http://localhost:5001/swagger' -TimeoutSec 60)) { 
    Write-Warning '‚ö†Ô∏è Backend no respondi√≥ en 60 segundos' 
} else {
    Write-Host "‚úÖ Backend funcionando en http://localhost:5001" -ForegroundColor Green
}

if (-not (Wait-HttpReady -Url 'http://localhost:8080' -TimeoutSec 60)) { 
    Write-Warning '‚ö†Ô∏è Frontend no respondi√≥ en 60 segundos' 
} else {
    Write-Host "‚úÖ Frontend funcionando en http://localhost:8080" -ForegroundColor Green
}

# 7. Mostrar informaci√≥n de procesos
Write-Host ""
Write-Host "üìä Informaci√≥n de procesos:" -ForegroundColor Cyan
Write-Host "Backend PID: $($backend.ProcessId) | Frontend PID: $($frontend.ProcessId)" -ForegroundColor White
Write-Host ""
Write-Host "üåê URLs disponibles:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Frontend: http://localhost:8080" -ForegroundColor White
Write-Host "‚Ä¢ Backend API: http://localhost:5001" -ForegroundColor White
Write-Host "‚Ä¢ Swagger: http://localhost:5001/swagger" -ForegroundColor White
Write-Host "‚Ä¢ Web P√∫blica: http://localhost:8080/web-publica.html" -ForegroundColor White
Write-Host ""
Write-Host "üìÅ Archivos servidos desde: wwwroot/" -ForegroundColor Cyan
Write-Host ""

# 8. Iniciar monitoreo de logs (opcional)
if ($args -contains '-logs') {
    Write-Host "üìã Iniciando monitoreo de logs..." -ForegroundColor Yellow
    Tail-Logs -Paths @($backend.StdOutLog,$backend.StdErrLog,$frontend.StdOutLog,$frontend.StdErrLog)
}


