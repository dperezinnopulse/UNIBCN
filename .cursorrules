# Pol√≠tica de ejecuci√≥n en Windows (no bloqueo) ‚Äì Proyecto UB Formaci√≥n

Objetivo: evitar bloqueos del agente. Todos los servicios/comandos de larga duraci√≥n deben ejecutarse en background, con logging y verificaci√≥n de salud.

Reglas operativas
- Ejecutar procesos de larga duraci√≥n SIEMPRE en background (Start-Process o Start-Job) y sin -Wait.
- Redirigir SIEMPRE stdout/stderr a ficheros de log y, si es √∫til, leerlos en streaming (Get-Content -Wait) desde jobs aparte.
- Aplicar timeouts: matar procesos colgados (Stop-Process -Force) si no responden en el tiempo esperado.
- Usar rutas absolutas y establecer WorkingDirectory correcto antes de lanzar procesos.
- Deshabilitar interactividad/paginadores: GIT_PAGER=cat, PAGER=cat, $ProgressPreference='SilentlyContinue'.
- Forzar UTF-8: chcp 65001; $OutputEncoding = [System.Text.UTF8Encoding]::new($false).
- Servicios HTTP: verificar salud con Invoke-WebRequest -TimeoutSec en bucle hasta √©xito o timeout.
- Antes de relanzar dotnet: matar procesos previos (Stop-ByName 'dotnet') y dormir 2-3 s.

Snippets/Funciones reutilizables (PowerShell)
- scripts/ps-utils.ps1 define:
  - Start-BackgroundCommand: lanza procesos en background con logs y timeout de arranque.
  - Tail-Logs: tail -Wait en jobs separados para stdout/stderr.
  - Stop-ByName: termina procesos por nombre.
  - Wait-HttpReady: health-check HTTP con reintentos/timeout.
  - Invoke-Short: ejecutar comandos ‚Äúcortos‚Äù no interactivos con timeout.

Convenciones del proyecto
- Backend (.NET): UB.Actividad1.API en http://localhost:5001
- Frontend (WebServer .NET): http://localhost:8080
- Scripts recomendados: start-app-robusto.ps1 (arranca ambos en background, health-check + tail logs)

Ejemplo de uso r√°pido
```
pwsh -NoProfile -ExecutionPolicy Bypass -File .\start-app-robusto.ps1
```

# Cursor Rules - Proyecto UB Formaci√≥n

## üö´ COMANDOS QUE BLOQUEAN AL ASISTENTE

### Comandos que NO usar (se quedan esperando):
- `Start-Process` - ‚ùå BLOQUEA (cualquier variante)
- `Start-Sleep` - ‚ùå BLOQUEA (tiempos largos)
- `Get-Process` - ‚ùå BLOQUEA
- `Start-Job` - ‚ùå BLOQUEA
- `dotnet build` - ‚ùå BLOQUEA (sin flags)
- `dotnet run` - ‚ùå BLOQUEA (sin &)
- `netstat` - ‚ùå BLOQUEA (en algunos casos)
- Comandos que abren ventanas del navegador

### Alternativas que S√ç usar:
- `netstat -an | findstr :puerto` - ‚úÖ NO BLOQUEA (con pipe)
- `dotnet build --verbosity quiet --no-restore` - ‚úÖ NO BLOQUEA
- `dotnet run --urls="http://localhost:5001" &` - ‚úÖ NO BLOQUEA (con &)
- `Invoke-RestMethod` - ‚úÖ NO BLOQUEA
- `Invoke-WebRequest` - ‚úÖ NO BLOQUEA
- `Write-Host` - ‚úÖ NO BLOQUEA
- `cd` - ‚úÖ NO BLOQUEA
- `&` (operador de background) - ‚úÖ NO BLOQUEA
- `tasklist` - ‚úÖ NO BLOQUEA

## üèóÔ∏è ARQUITECTURA DEL PROYECTO

### Backend (API)
- **Puerto**: 5001
- **URL**: http://localhost:5001
- **Proyecto**: UB.Actividad1.API
- **Framework**: .NET 8 Minimal APIs
- **Base de datos**: SQL Server con Entity Framework Core

### Frontend (WebServer)
- **Puerto**: 8080
- **URL**: http://localhost:8080
- **Proyecto**: WebServer (act√∫a como proxy)
- **Tecnolog√≠as**: HTML5, JavaScript, Bootstrap 5

## üîß COMANDOS DE INICIO

### Iniciar Backend:
```powershell
cd "UB.Actividad1.API" && dotnet run --urls="http://localhost:5001" &
```

### Iniciar Frontend:
```powershell
cd WebServer && dotnet run --urls="http://localhost:8080" &
```

### Verificar servicios:
```powershell
netstat -an | findstr ":5001\|:8080"
```

## üîê AUTENTICACI√ìN

### Usuarios de prueba:
- **SAE**: username="SAE", password="SAE", rol="Gestor", UnidadGestionId=3
- **Admin**: username="Admin", password="Admin", rol="Admin"

### Endpoints de autenticaci√≥n:
- `POST /api/auth/login` - Login
- `POST /api/auth/register` - Registro
- `GET /api/auth/hash` - Generar hash BCrypt

## üìä BASE DE DATOS

### Estados de Actividad:
- ID 6: "Borrador" (BOR) - Estado por defecto para nuevas actividades
- ID 7: "Enviada" (ENV)
- ID 8: "Subsanar" (SUB)
- ID 9: "Aceptada" (ACE)

### Unidades de Gesti√≥n:
- ID 1: IDP
- ID 2: CRAI  
- ID 3: SAE

## üéØ FUNCIONALIDADES IMPLEMENTADAS

### Creaci√≥n de Actividades:
- ‚úÖ Solo el campo "T√≠tulo" es obligatorio
- ‚úÖ Validaci√≥n en frontend y backend
- ‚úÖ Estado "Borrador" asignado autom√°ticamente
- ‚úÖ UsuarioAutorId extra√≠do del token JWT
- ‚úÖ C√≥digo autom√°tico generado si no se proporciona

### Validaci√≥n:
- ‚úÖ Frontend: Indicaci√≥n visual en rojo para campos obligatorios
- ‚úÖ Backend: Error 400 Bad Request si falta t√≠tulo
- ‚úÖ Mensaje: "El t√≠tulo es obligatorio"

### Sistema de Mensajes No Le√≠dos:
- ‚úÖ Backend: Marca mensajes como no le√≠dos cuando otros usuarios escriben
- ‚úÖ Endpoint para marcar mensajes como le√≠dos
- ‚úÖ Endpoint para obtener conteo de mensajes no le√≠dos por actividad
- ‚úÖ Frontend: Filtro de mensajes no le√≠dos (switch on/off)
- ‚úÖ Frontend: Etiquetas de mensajes no le√≠dos en lista
- ‚úÖ Frontend: Icono de mensajes cambia a azul cuando hay no le√≠dos
- ‚úÖ Marcado autom√°tico como le√≠do al abrir mensajes

## üîÑ FLUJO DE TRABAJO

### Para probar funcionalidad:
1. Verificar servicios: `netstat -an | findstr ":5001\|:8080"`
2. Login: `Invoke-RestMethod -Uri "http://localhost:5001/api/auth/login" -Method POST -ContentType "application/json" -Body '{"username":"SAE","password":"SAE"}'`
3. Crear actividad: `Invoke-RestMethod -Uri "http://localhost:5001/api/actividades" -Method POST -Headers $headers -Body '{"Titulo":"Test","UnidadGestionId":1}'`

### Para desarrollo:
- Usar scripts de prueba: `.\test-frontend.ps1`, `.\test-validation.ps1`, `.\test-final.ps1`
- Verificar logs en consola del navegador
- Usar `Invoke-WebRequest` para capturar p√°ginas HTML

## üìÅ ARCHIVOS IMPORTANTES

### Frontend:
- `Frontend/index.html` - P√°gina principal de creaci√≥n
- `Frontend/scripts-clean.js` - L√≥gica principal
- `Frontend/auth.js` - Autenticaci√≥n
- `Frontend/ug-specific-fields.js` - Campos por unidad gestora

### Backend:
- `UB.Actividad1.API/Program.cs` - Endpoints principales
- `UB.Actividad1.API/DTOs/CreateActividadDto.cs` - DTO para crear actividades

## üö® PROBLEMAS CONOCIDOS Y SOLUCIONES

### Error 404 en /api/actividades-frontend:
- **Soluci√≥n**: Usar `/api/actividades` (endpoint correcto)

### Error 400 Bad Request:
- **Causa**: Formato de datos incorrecto (camelCase vs PascalCase)
- **Soluci√≥n**: Enviar datos en PascalCase desde frontend

### Error de clave for√°nea FK_Actividades_EstadosActividad:
- **Causa**: EstadoId hardcodeado a 1 (no existe)
- **Soluci√≥n**: Usar EstadoId = 6 (Borrador)

### Redirecci√≥n con ID undefined:
- **Causa**: Frontend accede a `resultado.Id` (PascalCase) pero backend devuelve `id` (camelCase)
- **Soluci√≥n**: Usar `resultado.id` en lugar de `resultado.Id`

### Error 401 (Unauthorized) en mensajes:
- **Causa**: Backend no reiniciado despu√©s de cambios en endpoints de mensajes
- **Soluci√≥n**: Reiniciar backend con `taskkill /F /IM dotnet.exe` y `cd "UB.Actividad1.API" && dotnet run --urls="http://localhost:5001" &`

### Comandos que bloquean:
- **Soluci√≥n**: Usar alternativas que retornen inmediatamente

### Comando Start-Sleep bloquea:
- **Causa**: `Start-Sleep -Seconds 5` bloquea la ejecuci√≥n esperando que termine el tiempo
- **Soluci√≥n**: NUNCA usar `Start-Sleep` - continuar con el siguiente paso sin esperar
- **Alternativa**: Ejecutar comandos secuencialmente sin delays bloqueantes

### Comando dotnet build bloquea:
- **Causa**: `dotnet build` puede bloquear si hay errores de compilaci√≥n
- **Soluci√≥n**: Usar `dotnet build --verbosity quiet` o verificar errores con `dotnet build --no-restore` y luego usar `&` para background

### Comando dotnet run bloquea:
- **Causa**: `dotnet run` sin `&` bloquea la ejecuci√≥n esperando que termine el servidor
- **Soluci√≥n**: SIEMPRE usar `dotnet run --urls="http://localhost:5001" &` para ejecutar en background
- **Alternativa**: Usar `Start-Process dotnet -ArgumentList "run", "--urls=http://localhost:5001"` para ejecutar en proceso separado
- **Recordatorio**: Nunca ejecutar `dotnet run` sin `&` o se quedar√° esperando indefinidamente

### Comando sqlcmd bloquea:
- **Causa**: `sqlcmd` sin opciones no interactivas espera entrada del usuario
- **Soluci√≥n**: Usar `sqlcmd -Q "query"` para ejecutar consultas directamente sin interacci√≥n
- **Alternativa**: Usar `Invoke-Sqlcmd -Query "query"` de PowerShell con m√≥dulo SqlServer importado

### Comando Start-Process bloquea:
- **Causa**: `Start-Process` puede bloquearse si el proceso hijo requiere entrada del usuario o confirmaciones
- **Soluci√≥n**: Usar `&` al final para ejecutar completamente en background
- **Alternativa**: Usar `Start-Job` con `-ScriptBlock` en lugar de `Start-Process`

### Comando Invoke-WebRequest bloquea:
- **Causa**: `Invoke-WebRequest` con `-TimeoutSec` puede bloquearse esperando la respuesta o el timeout
- **Soluci√≥n**: Usar `Start-Job` para ejecutar la petici√≥n en background
- **Alternativa**: Usar `curl.exe` que es m√°s r√°pido y no bloquea tanto

## üìù NOTAS DE DESARROLLO

- El frontend env√≠a datos en PascalCase para coincidir con el DTO del backend
- Las fechas se env√≠an como ISO string o null
- El token JWT se a√±ade autom√°ticamente por auth.js
- Los usuarios no-Admin solo ven sus propias actividades
- La unidad gestora se preselecciona seg√∫n el usuario logueado

## üß™ Playwright / Generaci√≥n de manual ‚Äì Lecciones aprendidas

- Node no disponible como `node` en PATH: usar ruta absoluta `"C:\\Program Files\\nodejs\\node.exe"` para ejecutar Playwright.
- Evitar tuber√≠as tipo `| cat` en PowerShell: provocan errores de `Get-Content`. Ejecutar sin pipe.
- Rutas de tests: en Windows las barras invertidas pueden interpretarse como regex. Usar forward slashes y comillas: `test 'tests/playwright/generate-ug-captures.spec.ts'`.
- Servicios deben estar levantados antes de las capturas: backend y frontend con `--urls='http://0.0.0.0:5001'` y `--urls='http://0.0.0.0:8080'` en background.
- Si el login falla o bloquea, inyectar token antes de navegar: `page.addInitScript(() => localStorage.setItem('ub_token','E2E'); ...)` y navegar directo a `/index.html`.
- Selectores UG: los elementos `[data-ug]` pueden estar ocultos; seleccionar la UG en `#actividadUnidadGestion` antes de capturar para asegurar visibilidad real.
- Overlay rojo desalineado: evitar `boundingBox + scroll`. Usar `getBoundingClientRect()` y dibujar overlay `position: fixed` sin desplazar la p√°gina.
 - PowerShell: ejecutar binarios con rutas con espacios usando SIEMPRE el operador de invocaci√≥n `&` y comillas.
   - Correcto: `& "C:\\Program Files\\nodejs\\node.exe" ".\\scripts\\capture-mensajes.js"`
   - Incorrecto: `"C:\\Program Files\\nodejs\\node.exe" .\\scripts\\capture-mensajes.js &` (ParserError)
