# TEST FINAL - Simulaci√≥n completa del flujo de usuario
Write-Host "=== TEST FINAL - FLUJO COMPLETO DE USUARIO SAE ===" -ForegroundColor Green

# 1. Login como usuario SAE
Write-Host "1. üîê Login como usuario SAE..." -ForegroundColor Yellow
try {
    $loginResponse = Invoke-RestMethod -Uri "http://localhost:5001/api/auth/login" -Method POST -ContentType "application/json" -Body '{"username":"SAE","password":"SAE"}'
    $token = $loginResponse.token
    $user = $loginResponse.user
    Write-Host "   ‚úÖ Login exitoso - Usuario: $($user.name), Rol: $($user.rol)" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Error en login: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 2. Probar validaci√≥n - Intentar crear sin t√≠tulo
Write-Host "2. üö´ Probando validaci√≥n - Actividad SIN t√≠tulo..." -ForegroundColor Yellow
try {
    $headers = @{'Content-Type'='application/json'; 'Authorization'="Bearer $token"}
    $response = Invoke-RestMethod -Uri "http://localhost:5001/api/actividades" -Method POST -Headers $headers -Body '{"Titulo":"","UnidadGestionId":1}'
    Write-Host "   ‚ö†Ô∏è  PROBLEMA: Se cre√≥ actividad sin t√≠tulo" -ForegroundColor Yellow
} catch {
    Write-Host "   ‚úÖ CORRECTO: Validaci√≥n funciona - Error 400 Bad Request" -ForegroundColor Green
}

# 3. Crear actividad v√°lida con solo t√≠tulo
Write-Host "3. ‚úÖ Creando actividad v√°lida (solo t√≠tulo)..." -ForegroundColor Yellow
try {
    $actividadData = @{
        Titulo = "Actividad de Prueba SAE - Solo T√≠tulo"
        UnidadGestionId = 1
    } | ConvertTo-Json
    
    $response = Invoke-RestMethod -Uri "http://localhost:5001/api/actividades" -Method POST -Headers $headers -Body $actividadData
    Write-Host "   ‚úÖ Actividad creada exitosamente:" -ForegroundColor Green
    Write-Host "      üìã ID: $($response.id)" -ForegroundColor Cyan
    Write-Host "      üìã T√≠tulo: $($response.titulo)" -ForegroundColor Cyan
    Write-Host "      üìã Estado: Borrador (ID: $($response.estadoId))" -ForegroundColor Cyan
    Write-Host "      üìã Unidad Gesti√≥n: $($response.unidadGestionId)" -ForegroundColor Cyan
    Write-Host "      üìã Usuario Autor: $($response.usuarioAutorId)" -ForegroundColor Cyan
    
} catch {
    Write-Host "   ‚ùå Error creando actividad: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# 4. Verificar que la actividad se puede recuperar
Write-Host "4. üîç Verificando que la actividad se puede recuperar..." -ForegroundColor Yellow
try {
    $actividad = Invoke-RestMethod -Uri "http://localhost:5001/api/actividades/$($response.id)" -Method GET -Headers $headers
    Write-Host "   ‚úÖ Actividad recuperada correctamente" -ForegroundColor Green
    Write-Host "      üìã T√≠tulo: $($actividad.titulo)" -ForegroundColor Cyan
} catch {
    Write-Host "   ‚ùå Error recuperando actividad: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "=== üéâ TEST FINAL COMPLETADO EXITOSAMENTE ===" -ForegroundColor Green
Write-Host "‚úÖ El usuario SAE puede crear actividades con solo el t√≠tulo" -ForegroundColor Green
Write-Host "‚úÖ La validaci√≥n de campos obligatorios funciona correctamente" -ForegroundColor Green
Write-Host "‚úÖ El backend asigna autom√°ticamente el estado 'Borrador'" -ForegroundColor Green
